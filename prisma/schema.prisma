// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Settings as embedded document
  reviewIntervals      Int[]   @default([1, 3, 7, 14, 30])
  enableNotifications  Boolean @default(true)
  theme               String  @default("dark")
  timezone            String  @default("UTC")

  // Relations
  problems    Problem[]
  contests    Contest[]
  todos       Todo[]
  suggestions UserProblemSuggestion[]

  @@map("users")
}

model Problem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  platform       String   // 'leetcode' | 'codeforces' | 'atcoder'
  title          String
  problemId      String
  difficulty     String
  url            String
  dateSolved     String
  createdAt      String
  notes          String   @default("")
  isReview       Boolean  @default(false)
  repetition     Int      @default(0)
  interval       Int      @default(0)
  nextReviewDate String?
  topics         String[]
  status         String   @default("active") // 'active' | 'learned'
  companies      String[]
  source         String   @default("manual") // 'manual' | 'company' | 'potd'

  // Relations
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions UserProblemSuggestion[]

  @@unique([url, userId])
  @@map("problems")
}

model Contest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  platform  String   // 'leetcode' | 'codeforces' | 'atcoder'
  name      String
  date      String
  rank      Int?
  rating    Int?
  notes     String   @default("")
  createdAt String

  // Embedded problems object
  problemsSolved Int
  problemsTotal  Int

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contests")
}

model Todo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  title         String
  description   String?
  priority      String   @default("medium") // 'low' | 'medium' | 'high' | 'urgent'
  status        String   @default("pending") // 'pending' | 'in-progress' | 'completed' | 'cancelled'
  category      String   @default("other") // 'coding' | 'study' | 'interview-prep' | 'project' | 'personal' | 'other'
  dueDate       String?
  completedAt   String?
  createdAt     String
  updatedAt     String
  tags          String[]
  estimatedTime Int? // in minutes
  actualTime    Int? // in minutes
  notes         String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model UserProblemSuggestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  problemId     String   @db.ObjectId
  generatedAt   DateTime @default(now())
  expiresAt     DateTime
  suggestions   Json
  source        String   @default("llm-failure")
  failureReason String?
  confidence    Float    @default(0.0)
  error         Json?

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@index([userId, expiresAt])
  @@map("user_problem_suggestions")
}
